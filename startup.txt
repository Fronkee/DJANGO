Start Up

 => pip knowledge
 => Virtualenv Project
 => SQLite Installation
 => Admin Panel
 => Custom App
 => Templating  
 => Models
 => Form Handling
 => CRUD
 => Relational Database
 => User Authentication
 => Role base Decorators


Installation Extension for vscode
    -> django -intellisense
    -> SQLite

1. pip = package/dependencide manager
    -> pip list
    -> pip show requests
    -> pip uninstall pip
    -> easy_install pip

2. Virtualenv Project 
-> powershell
        ->virtualenv env    
            -> create env module

        ** activate  env** important
            ->mac , source env/bin/activate
            ->window, ./env/Scripts/activate
        - If not activate error - 
            -Get-ExecutionPolicy
            - set-executionpolicy remotesigned - A

        - pip install django    
        - python -m django --version <- check django version
        - django-admin
        - django-admin startproject [name]
   

        Runserver
            - gci -name <= show directory 
            - cd app 
            - python manage.py runserver

3. SQLite Installation
 .show
 .help  

 - Admin Activation
     * migration is table * 
    - python manage.py makemigrations    
    - python mangae.py migrate => default migration      

    " create user"
     - python manage.py createsuperuser

4.  Custom App
     - python manage.py startapp category 

    " create two views " category/views
     - return HttpResponse('I am Category')

        data = {
            'title' : 'welcome'
        }
     - return render(request,'category/cats.html',data)

    " url "<= app
       -w,1
        from category import views as cat_views
        path('cats/',cat_views.cats),

       -w,2*
         category/urls
            from django.urls import path
            from .views import *
            urlpatterns = [ 
                path('',cats,name='cats'),
                path('subs/',subs,name='subs')
            ]
         app/urls    
            from django.urls import path,include
            path('cats/',include('category.urls'))



5. Template engine (jinja2) 
    - templates/category
        - {% extends 'app/base.html'%}
        -cats.html
        -subs.html

    - templates/app
        -base.html
           {% load static %} !h for static image,css,js
           <link rel="stylesheet" href="{% static 'app/css/custom.css'%}">
            -jinja2
             {% include 'app/nav.html'%}
             {% block content %} {% endblock %} !h

    - static/app !h naming convention
        css
            -custom.css
        images
            -png,jpg    
  

6. Category model
    -category/models 
        class Category(models.Model):
            name = models.CharField(max_length=100)
            image = models.ImageField()
        **pillow libiary for image    

    -> python manage.py makemigrations -> 0001_migrations
    -> python manage.py sqlmigrate category 0001   @know
    -> python manage.py  migrate       

    Admin Register
        category/admin
            - from .models import Category <- for show admin panel
             -admin.site.register(Category)

    ** For Right Image Media **
        app/setting
             import os
            -MEDIA_ROOT = os.path.join(BASE_DIR,'media')
            -MEDIA_URL = '/media/'

        app/urls 
           from django.conf import settings
           from django.conf.urls.static import static 

           if settings.DEBUG:
                urlpatterns += static(
                    settings.MEDIA_URL,
                    document_root=settings.MEDIA_ROOT
                )     

7. Form Handling
    category/forms.py
        from django import forms
        from .models import SubCategory
        class SubCatFrom(forms.ModelForm):
            class Meta:
                model = SubCategory
                fields = '__all__'

    category/model.py
        from .forms import SubCatFrom,CatForm
        def createCat(request):
            if request.method == 'POST':
                form = CatForm(request.POST,request.FILES)
                if form.is_valid():
                    form.save()
                    return redirect('/cats')
            else:
                return render(request,'category/create_cats.html',{'form':CatForm})
                
    * for design crispy-bootstarp5*
        pip install crispy-bootstarp5   

    app/settings
        INSTALLED_APPS = [
            'crispy_forms',
            'crispy_bootstrap5'
        ]
        CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

        CRISPY_TEMPLATE_PACK = "bootstrap5"

    category/create_sub.html 
        -{{% load crispy_forms_tags %}}    

8 . CRUD 

9. User Authentication
     - python manage.py startapp user
     - user/templates/user 
        -register
        -login
        -logout

     -user/urls
        from django.urls import path
        from django.contrib.auth import views as auth_view   # <=  default login and logout view from django
        from .views import *               

        urlpatterns = [
            path('/register',register,name='user-register'),
            path('/login',auth_view.LoginView.as_view(template_name='user/login.html'),name='user-login'),
            path('/logout',auth_view.LogoutView.as_view(template_name='user/logout.html'),name='user-logout')
        ]

    -user/models
        User._meta.get_field('email')._unique = True

    app/app/settings/
        LOGIN_REDIRECT_URL ='home'    
        LOGIN_URL = 'user-login'
        LOGOUT_REDIRECT_URL = 'home'

10 . Role base Decorators       
    from django.contrib.auth.decorators import login_required

    @login_required <= decorators

    custom decorators for Role
        from django.shortcuts import redirect


def allow_users(allowed_roles=[]):
    def decorator(view_fun):
        def wrapper_fun(request,*args,**kwargs):
            group = None
            if request.user.groups.exists():
                group = request.user.groups.all()[0].name
            
            if group in allowed_roles:
                return view_fun(request,*args,*kwargs)
            else:
                return redirect('/user/login/')
        return wrapper_fun    
    return decorator




11. Groups
        